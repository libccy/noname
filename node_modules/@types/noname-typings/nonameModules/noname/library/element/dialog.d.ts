export class Dialog extends HTMLDivElement {
    constructor(...args: any[]);
    /** @type { HTMLDivElement } */
    contentContainer: HTMLDivElement;
    /** @type { HTMLDivElement } */
    content: HTMLDivElement;
    /** @type { HTMLDivElement } */
    bar1: HTMLDivElement;
    /** @type { HTMLDivElement } */
    bar2: HTMLDivElement;
    /** @type { Button[] } */
    buttons: Button[];
    /** @type { boolean } */
    static: boolean;
    /** @type { boolean } */
    noforcebutton: boolean;
    /** @type { boolean } */
    noopen: boolean;
    /**
     * dialog添加数据是否支持分页
     * @type { boolean }
     **/
    supportsPagination: boolean;
    /**
     * dialog中储存的分页元素(用来兼容一个dialog中多个分页的情况)
     * @type { Map<HTMLElement, InstanceType<typeof import("../../util/pagination.js").Pagination>> }
     */
    paginationMap: Map<HTMLElement, InstanceType<typeof import("../../util/pagination.js").Pagination>>;
    /**
     * 根据数据类型，为每一个类型分配一页的最大数据量
     * @type { Map<keyof UI['create']['buttonPresets'], number> }
     */
    paginationMaxCount: Map<keyof UI['create']['buttonPresets'], number>;
    /**
     *
     * @param  {RowItem[]} args
     */
    addNewRow(...args: RowItem[]): void;
    itemContainers: any[];
    /**
     *
     * @param { string | HTMLDivElement | Card[] | Player[] } item
     * @param {*} [noclick]
     * @param { boolean } [zoom]
     */
    add(item: string | HTMLDivElement | Card[] | Player[], noclick?: any, zoom?: boolean): string | HTMLDivElement | import("noname-typings/nonameModules/noname/library/element/player.js").Player[] | import("noname-typings/nonameModules/noname/library/element/card.js").Card[];
    forcebutton: boolean;
    /**
     * @param { string } str
     * @param { boolean } [center]
     */
    addText(str: string, center?: boolean): this;
    addSmall(item: any, noclick: any): string | HTMLDivElement | import("noname-typings/nonameModules/noname/library/element/player.js").Player[] | import("noname-typings/nonameModules/noname/library/element/card.js").Card[];
    addAuto(content: any): void;
    open(): this;
    _dragtransform: any;
    close(): this;
    /**
     * @param { string } str
     */
    setCaption(str: string): this;
}

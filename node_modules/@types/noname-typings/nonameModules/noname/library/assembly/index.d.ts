/**
 * > 这玩意因为狂神还得是数组
 *
 * 这个就是一个存放函数的数组，实例化是时接受一个字符串，姑且叫做这个数组的名字的吧。然后
 * ，会自动的从buildin中找与这个名字相同的，把对应的函数，放入这个数组中。
 *
 * 这个东西有个缺陷，就是还没有对应的方法去调用所有保存的这些函数。
 * game.callHook(name)，只是调用的初始的，放在buildin.js 的文件里的函数。
 * 也就是下面的defaultHookcompatition中的函数。
 *
 * @example
 * const assembly = new NonameAssembly('myAssembly');//这里会检查buildin.js里的写的函数，当然也可以通过下面的方式添加。

// 添加命名函数
function myFunction() {
    console.log('Hello, world!');
}

assembly.add('myFunction', myFunction);

// 添加匿名函数
assembly.add(() => console.log('Anonymous function'));

// 检查是否已添加
console.log(assembly.has('myFunction')); // 输出: true
console.log(assembly.has('nonExistentFunction')); // 输出: false

// 获取函数
const myFunctionInstance = assembly.get('myFunction');
if (myFunctionInstance) {
    myFunctionInstance(); // 输出: Hello, world!
}

// 更新函数
function updatedMyFunction() {
    console.log('Updated hello, world!');
}

assembly.update('myFunction', updatedMyFunction);
const updatedFunctionInstance = assembly.get('myFunction');
if (updatedFunctionInstance) {
    updatedFunctionInstance(); // 输出: Updated hello, world!
}

// 使用 push 方法
assembly.push('anotherFunction', () => console.log('Another function'));
console.log(assembly.length); // 输出: 3
 *
 *
 *
 * @template {NonameAssemblyType} AssemblyType
 * @template {keyof AssemblyType} Name
 * @extends {Array<AssemblyType[Name][keyof AssemblyType[Name]]>}
 */
export class NonameAssembly<AssemblyType extends NonameAssemblyType, Name extends keyof AssemblyType> extends Array<AssemblyType[Name][keyof AssemblyType[Name]]> {
    /**
     *
     * @param {Name} name
     */
    constructor(name: Name);
    get name(): Name;
    /**
     *
     * @param {keyof AssemblyType[Name]} name
     * @param {AssemblyType[Name][keyof AssemblyType[Name]]} content
     * @override
     */
    override add(name: keyof AssemblyType[Name], content: AssemblyType[Name][keyof AssemblyType[Name]]): this;
    /**
     *
     * @param {keyof AssemblyType[Name]} name
     * @param {AssemblyType[Name][keyof AssemblyType[Name]]} content
     * @override
     */
    override push(name: keyof AssemblyType[Name], content: AssemblyType[Name][keyof AssemblyType[Name]]): number;
    /**
     *
     * @param {keyof AssemblyType[Name]} name
     */
    has(name: keyof AssemblyType[Name]): boolean;
    /**
     *
     * @param {keyof AssemblyType[Name]} name
     * @returns {AssemblyType[Name][keyof AssemblyType[Name]] | undefined}
     */
    get(name: keyof AssemblyType[Name]): AssemblyType[Name][keyof AssemblyType[Name]] | undefined;
    /**
     *
     * @param {keyof AssemblyType[Name]} name
     * @param {AssemblyType[Name][keyof AssemblyType[Name]]} content
     */
    update(name: keyof AssemblyType[Name], content: AssemblyType[Name][keyof AssemblyType[Name]]): boolean;
    #private;
}
export namespace defaultHookcompatition {
    let checkBegin: NonameAssembly<NonameAssemblyType, "checkBegin">;
    let checkCard: NonameAssembly<NonameAssemblyType, "checkCard">;
    let checkTarget: NonameAssembly<NonameAssemblyType, "checkTarget">;
    let checkButton: NonameAssembly<NonameAssemblyType, "checkButton">;
    let checkEnd: NonameAssembly<NonameAssemblyType, "checkEnd">;
    let uncheckBegin: NonameAssembly<NonameAssemblyType, "uncheckBegin">;
    let uncheckCard: NonameAssembly<NonameAssemblyType, "uncheckCard">;
    let uncheckTarget: NonameAssembly<NonameAssemblyType, "uncheckTarget">;
    let uncheckButton: NonameAssembly<NonameAssemblyType, "uncheckButton">;
    let uncheckEnd: NonameAssembly<NonameAssemblyType, "uncheckEnd">;
    let checkOverflow: NonameAssembly<NonameAssemblyType, "checkOverflow">;
    let checkTipBottom: NonameAssembly<NonameAssemblyType, "checkTipBottom">;
    let checkDamage1: NonameAssembly<NonameAssemblyType, "checkDamage1">;
    let checkDamage2: NonameAssembly<NonameAssemblyType, "checkDamage2">;
    let checkDamage3: NonameAssembly<NonameAssemblyType, "checkDamage3">;
    let checkDamage4: NonameAssembly<NonameAssemblyType, "checkDamage4">;
    let addSkillCheck: NonameAssembly<NonameAssemblyType, "addSkillCheck">;
    let removeSkillCheck: NonameAssembly<NonameAssemblyType, "removeSkillCheck">;
}
export namespace defaultAssemblys { }

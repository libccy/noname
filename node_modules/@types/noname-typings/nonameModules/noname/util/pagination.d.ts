/**
 * 简单分页类
 */
export class Pagination {
    /** 是否加载了分页类对应的css文件 */
    static loaded: boolean;
    /** @type { HTMLUListElement } 渲染的dom元素 */
	element: HTMLUListElement;
    /**
     * @param { Partial<PaginationState> } paramsObj
     */
    constructor(paramsObj?: Partial<PaginationState>);
    /**
     * @type { PaginationState }
     */
    state: PaginationState;
    /** 切换页码并设置按钮点击事件 */
    switchPage(): void;
    /**
     * 跳转页数
     * @param { number } pageNumber
     */
    gotoPage(pageNumber: number): void;
    /** 设置上一页下一页按钮合法性 */
    switchPrevNextAble(): void;
    /** 渲染Dom */
    renderPageDOM(): void;
    /**
     * 判断按钮合法性
     * @param { number } pageNumber
     */
    isIllegal(pageNumber: number): boolean;
    /**
     * 隐藏/显示省略符号占位
     * @param { string } selector
     **/
    hiddenEllipse(selector: string, shouldHidden?: boolean): void;
    /**
     * @overload
     * @param { string } selector
     * @returns { ReturnType<typeof document['querySelector']> }
     */
    selectorEle(selector: string): ReturnType<(typeof document)['querySelector']>;
    /**
     * @overload
     * @param { string } selector
     * @param { boolean } [all]
     * @returns { ReturnType<typeof document['querySelectorAll']> }
     */
    selectorEle(selector: string, all?: boolean): ReturnType<(typeof document)['querySelectorAll']>;
    /**
     * @param { Element } eleObj
     * @param { string } className
     */
    hasClass(eleObj: Element, className: string): boolean;
    /**
     * @param { Element } eleObj
     * @param { string } className
     */
    addClass(eleObj: Element, className: string): void;
    /**
     * @param { Element } eleObj
     * @param { string } className
     */
    removeClass(eleObj: Element, className: string): void;
    /**
     * 自行添加的修改总页数的方法
     *
     * @param { number } totalPageCount
     */
    setTotalPageCount(totalPageCount: number): void;
}
